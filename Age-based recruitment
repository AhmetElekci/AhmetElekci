import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("NAME SURNAME: ");
        String adSoyad = scanner.nextLine();

        System.out.print("ENTER YOUR AGE: ");
        int yas = scanner.nextInt();

        if (yas < 18) {
            System.out.println("You are Under 18 Years Old, You Cannot Enter the Bar.");
        } else {
            System.out.println("You are Over 18 Years Old, You Can Enter the Bar.");
            try {

                Connection connection = DriverManager.getConnection("jdbc:sqlite:test.db");


                String createTableSQL = "CREATE TABLE IF NOT EXISTS kisiler (adsoyad TEXT, yas INT)";


                connection.createStatement().execute(createTableSQL);


                String insertDataSQL = "INSERT INTO kisiler (adsoyad, yas) VALUES (?, ?)";


                PreparedStatement preparedStatement = connection.prepareStatement(insertDataSQL);


                preparedStatement.setString(1, adSoyad);
                preparedStatement.setInt(2, yas);


                preparedStatement.executeUpdate();


                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        scanner.close();
    }











}
@RestController
@RequestMapping("/api")
public class AgeCheckPresenter {

    private final PersonRepository personRepository;

    public AgeCheckPresenter(PersonRepository personRepository) {
        this.personRepository = personRepository;
    }

    @GetMapping("/age-check")
    public ResponseEntity<String> checkAge(@RequestParam("age") int age) {
        Person person = new Person();
        person.setAge(age);

        if (person.getAge() >= 18) {
            personRepository.save(person);
            return ResponseEntity.ok("Big");
        } else {
            personRepository.save(person);
            return ResponseEntity.ok("Small");
        }
    }
}
